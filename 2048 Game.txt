import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyAdapter;
import java.util.Random;

public class Game2048 {
    private JFrame frame;
    private JPanel gridPanel;
    private JLabel[][] gridLabels;
    private boolean win;

    private static final int SIZE = 4;
    private int[][] grid;
    private Random random;

    public Game2048() {
        grid = new int[SIZE][SIZE];
        random = new Random();
        initializeFrame();
        initializeGridPanel();
        initializeInfoPanel();
        initializeKeyListener();
        initializeGrid();
        updateGridLabels();
    }

    private void initializeFrame() {
        frame = new JFrame("2048");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300, 300);
        frame.setLayout(new BorderLayout());
    }

    private void initializeGridPanel() {
        gridPanel = new JPanel(new GridLayout(SIZE, SIZE));
        gridLabels = new JLabel[SIZE][SIZE];

        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                initializeLabel(i, j);
            }
        }

        frame.add(gridPanel, BorderLayout.CENTER);
    }

    private void initializeLabel(int i, int j) {
        gridLabels[i][j] = new JLabel("", JLabel.CENTER);
        gridLabels[i][j].setFont(new Font("Arial", Font.BOLD, 24));
        gridLabels[i][j].setOpaque(true);
        gridLabels[i][j].setBackground(Color.GREEN);
        gridLabels[i][j].setBorder(BorderFactory.createLineBorder(Color.WHITE));
        gridPanel.add(gridLabels[i][j]);
    }

    private void initializeInfoPanel() {
        JPanel infoPanel = new JPanel(new GridLayout(2, 2));
        frame.add(infoPanel, BorderLayout.NORTH);
    }

    private void initializeKeyListener() {
        frame.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                handleKeyPress(e.getKeyCode());
                updateGridLabels();
                if (isGameOver()) {
                    showGameOverDialog();
                }
            }
        });

        frame.setFocusable(true);
        frame.requestFocus();
        frame.setVisible(true);
    }

    private void handleKeyPress(int keyCode) {
        switch (keyCode) {
            case KeyEvent.VK_UP -> moveUp();
            case KeyEvent.VK_DOWN -> moveDown();
            case KeyEvent.VK_LEFT -> moveLeft();
            case KeyEvent.VK_RIGHT -> moveRight();
        }
    }

    private void moveUp() {
        // Implementation for moving up
        // ...
        if (moved) {
            addNewNumber();
        }
    }

    private void moveDown() {
        // Implementation for moving down
        // ...
        if (moved) {
            addNewNumber();
        }
    }

    private void moveLeft() {
        // Implementation for moving left
        // ...
        if (moved) {
            addNewNumber();
        }
    }

    private void moveRight() {
        // Implementation for moving right
        // ...
        if (moved) {
            addNewNumber();
        }
    }

    private void showGameOverDialog() {
        String result = win ? "Congratulations! You reached the 2048 tile!" : "Game over! Would you like to play again?";
        int choice = JOptionPane.showConfirmDialog(frame, result, "Game Over", JOptionPane.YES_NO_OPTION);

        if (choice == JOptionPane.YES_OPTION) {
            restart();
        } else {
            System.exit(0);
        }
    }

    private void restart() {
        win = false;
        initializeGrid();
        updateGridLabels();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(Game2048::new);
    }
}
